\mainpage A two-dimensional Biharmonic problem with the Bell triangular finite element

In this document, we demonstrate how to solve a two-dimensional Biharmonic equation using triangular finite elements within \c
oomph-lib. 

First, let consider the Biharmonic equation which is mathematically expressed as follow 

\f[
 \frac{\partial^4 u}{\partial x_1^4} + 2\frac{\partial^4 u}{\partial x_1^2\partial x_2^2} + \frac{\partial^4 u}{\partial x_2^4} = f(x_1,x_2), \ \ \ \mathbf{x} = (x_1,x_2) \in \Re^2. \ \ \ \ @E[eqn:biharmonic_pde]@
\f]

In this study, we consider the homogeneous Biharmonic equation with the exact solution 
\f[
 u(x_1,x_2)  = \cos(x_1)e^{x_2}.
\f]

The problem will be implemented in the rectangular domain \f$ \Omega = \{(x_1,x_2) | 0 \leq x_1 \leq 2, 0\leq x_2 \leq 1 \} \f$, and we apply Dirichlet boundary conditions such that the exact solution is satisfied. 

In order to formulate the finite element implementation of the Biharmonic equation, the weak formulation must be derived.
The reader is referred to <A HREF="../../../intro/html/index.html">
another document</A> for detailed descriptions of weak formulations.

After introducing the weight or test function \f$ \phi(x_i) \f$ and changing the differential equation (@R[eqn:biharmonic_pde]@) into the integral form, we have
\f[
0 = r = \int_{\Omega}{\left( \frac{\partial^4 u}{\partial x_1^4} + 2\frac{\partial^4 u}{\partial x_1^2\partial x_2^2} + \frac{\partial^4 u}{\partial x_2^4} - f(x_i)\right) \phi(x_i) d\Omega.} \ \ \ @E[eqn:biharmonic_weak]@
\f] 

Integrating by parts twice and using of the divergence theorem give

\f[
0 = r = \int_{\Omega}{\left( \frac{\partial^2 u}{\partial x_1^2}\frac{\partial^2 \phi}{\partial x_1^2} + 2\frac{\partial^2 u}{\partial x_1^2}\frac{\partial^2 \phi}{\partial x_2^2} + \frac{\partial^2 u}{\partial x_2^2}\frac{\partial^2 \phi}{\partial x_2^2} - f(x_i)\phi(x_i)\right) d \Omega} \f]
\f[ + \int_{\partial \Omega}  \nabla^3_n u \phi(x_i) d\partial \Omega - \int_{\partial \Omega} \nabla^2 u \frac{\partial \phi}{\partial n}(x_i) d\partial \Omega, \ \ \ \ \ @E[eqn:biharmonic_weak1]@
\f] 

where \f$ \partial \Omega \f$ denotes the domain boundary and \f$ \partial/\partial n \f$ the outward normal derivative. Since the test functions satisfy homogeneous boundary
conditions, \f$ \left. \phi \right|_{\partial \Omega} = 0 = \left. \frac{\partial \phi}{\partial n}\right|_{\partial \Omega}, \f$ the integrals for the last two terms of equation (@R[eqn:biharmonic_weak1]@) vanish.

Therefore, an alternative version of the weak form of (@R[eqn:biharmonic_pde]@) is given by

\f[
0 = r = \int_{\Omega}{\left( \frac{\partial^2 u}{\partial x_1^2}\frac{\partial^2 \phi}{\partial x_1^2} + 2\frac{\partial^2 u}{\partial x_1^2}\frac{\partial^2 \phi}{\partial x_2^2} + \frac{\partial^2 u}{\partial x_2^2}\frac{\partial^2 \phi}{\partial x_2^2} - f(x_i)\phi(x_i)\right) d \Omega.} \ \ \ \ \ @E[eqn:biharmonic_weak2]@
\f] 

It is noteworthy that the Galerkin method is employed in this study so that the choice of function spaces for the solution, \f$u(x_i)\f$, and the test function, \f$\phi(x_i)\f$, is the same. Therefore, both the solution and the test function can be approximated by the same set of shape function, \f$\psi_l\f$ as

\f[
u(x_i) = \sum_{l=1}^{N} U_{l}\psi_l(x_i), \ \ \ \ @E[eqn:soln_approx]@
\f]
and,
\f[
\phi(x_i) = \sum_{k=1}^{N} \Phi_{k}\psi_k(x_i), \ \ \ \ @E[eqn:test_approx]@
\f]
where \f$ N \f$ is the dimension of discrete approximating to function space. 

Substituting the derivatives of (@R[eqn:test_approx]@) into (@R[eqn:biharmonic_weak2]@), we have 

\f[
0 = r = \int_{\Omega}{\left( \frac{\partial^2 u}{\partial x_1^2}\sum_{k=1}^{N} \Phi_{k}\frac{\partial^2 \psi_{k}}{\partial x_1^2} + 2\frac{\partial^2 u}{\partial x_1^2}\sum_{k=1}^{N} \Phi_{k}\frac{\partial^2 \psi_{k}}{\partial x_2^2} + \frac{\partial^2 u}{\partial x_2^2}\sum_{k=1}^{N} \Phi_{k}\frac{\partial^2 \psi_{k}}{\partial x_2^2} - f(x_i)\sum_{k=1}^{N} \Phi_{k}\psi_{k}(x_i)\right) d \Omega,} \f] 

\f[
0 = r = \sum_{k=1}^{N}{\Phi_{k} r_{k}(U_1,U_2,...,U_N)}, \ \ \ \ @E[eqn:biharmonic_residual]@
\f]

where 

\f[
 r_{k}(U_1,U_2,...,U_N) = \int_{\Omega}{\left( \frac{\partial^2 u}{\partial x_1^2}\frac{\partial^2 \psi_{k}}{\partial x_1^2} + 2\frac{\partial^2 u}{\partial x_1^2}\frac{\partial^2 \psi_{k}}{\partial x_2^2} + \frac{\partial^2 u}{\partial x_2^2}\frac{\partial^2 \psi_{k}}{\partial x_2^2} - f(x_i)\psi_{k}(x_i)\right) d \Omega.} \ \ \ \ @E[eqn:biharmonic_res2]@
\f]

We have that (@R[eqn:biharmonic_residual]@) must hold for any value of the coefficients \f$ \Phi_k \f$, so the coefficients \f$ U_j \f$ must satisfy the equations

\f[  
r_k(U_1, U_2,...,U_N) = 0, \mbox{ \ \ \ \ for } k=1,2,...,N. 
\f]

After substituting the derivatives of (@R[eqn:soln_approx]@) into (@R[eqn:biharmonic_res2]@), the weak form of (@R[eqn:biharmonic_pde]@) can be expressed as

\f[
0 = r_{k} = \int_{\Omega}\left( \sum_{l=1}^{N}{U_l\frac{\partial^2 \psi_l}{\partial x_1^2}}\frac{\partial^2\psi_k}{\partial x_1^2} + 2\sum_{l=1}^{N}{U_l\frac{\partial^2 \psi_l}{\partial x^2_1}}\frac{\partial^2\psi_k}{\partial x^2_2} + \sum_{k=1}^{N}{U_l\frac{\partial^2 \psi_l}{\partial x_2^2}}\frac{\partial^2\psi_k}{\partial x_2^2} - f(x_i)\psi_k \right) dx_1dx_2. \ \ @E[eqn:biharmonic_weakform]@
\f]

Since we solve the Biharmonic equation with the Dirichlet boundary
conditions in this study, the boundary terms in
(@R[eqn:biharmonic_weakform]@) vanish. This is a consequence of every
test functions have to satisfy the homogeneous conditions at
boundaries. Now, it can be seen that the weak formulation of the equation contains the second-order derivatives of the approximation, \f$ \psi(x_i) \f$ of the solution. Hence, in order to make the integral exists, the approximation and its first-order derivative are required to be continuous. Therefore, the \f$ C^1 \f$-interpolations are required. 

Hence, the \c BellElement is introduced in this document to provide
the continuously differentiable shape functions to interpolate the
solution of a Biharmonic equation. This kind of element arises in order to satisfy \f$ C^1 \f$ continuity of the solutions of a fourth-order problem.

Specifically, we shall provide

- a general descriptions of the Bell triangular finite element
.
- numerical results of solving the Biharmonic equation with the \c BellElement
.
and
- how to implement the \c BellElement in \c oomph-lib using the
Biharmonic equation as a case study.
.

<HR>   
<HR>

\section overview Overview of the BellElement

The constructed \c BellElement provides a discretisation of the variational principle (@R[eqn:biharmonic_weakform]@) with two-dimensional, three-node triangular finite elements. In this element, the subparametric idea is employed. This means that the degree of geometric shape functions (shape function approximated a geometry) is defined to be lower than the degree of polynomials for parametric shape functions (shape function approximated a variable). In this study, a geometry is approximated by the linear Lagrange polynomials while the Bell shape functions are employed to interpolate variables. 

The two-dimensional linear Lagrange shape functions defined over a triangle are parametrised by the local coordinates \f$ s_1,s_2 \in [0,1]\f$ and are defined as

\f[ \psi_{1}(s_1,s_2) = s_1, \ \ \ \psi_{2}(s_1,s_2) = s_2, \ \ \ \psi_{3}(s_1,s_2) = 1-s_1-s_2. \ \ \ \ \ @E[eqn:linear_lagrange]@\f]

Therefore, a position \f$ {\bf x} = (x_1,x_2) \in \Re^2 \f$ is approximated by 

\f[
x_i(s_1,s_2) = \sum_{j=1}^{3} X_{ij} \ \psi_{j}(s_1,s_2)
\mbox{\ \ \ for $i=1,2$},
\ \ \ \ \ \ \ \ @E[linear]@
\f]
where \f$ X_{ij} \f$ are the nodal positions in the direction \f$ i^{th} \f$ at node \f$ j \f$.

Similar to a geometric approximation, a variable can be approximated as

\f[
u_i(x_1,x_2) = \sum_{l=1}^{3} \sum_{k=1}^{6}U_{ilk} \ \varphi_{lk}(\lambda_1,\lambda_2,\lambda_3),
\f]
where \f$ x_1,x_2 \in \Omega \f$ are the element's 2D global coordinates. The function \f$ \varphi_{lk}\f$ are the two-dimensional Bell shape functions parametrised by area coordinates \f$ \lambda_1, \lambda_2, \lambda_3\f$ which we will describe in the next two subsections.

<HR>

\subsection area_coor Area coordinates 

The area coordinate system or Barycentric coordinates are defined on a triangle which is expressed in terms of its three vertices. We consider a triangle defined by three vertices \f$ {\bf x}_{1}, {\bf x}_{2}, {\bf x}_{3}\f$ as 

@I w 0.55\textwidth triangle "The geometry of a triangle which has three nodes. "

The barycentric coordinates of point \f$ {\bf p} = (x,y)\f$ in the triangle
are simply defined to be ratios of triangular areas as,
\f[ \lambda_1 = \frac{A_1}{A}, \ \ \ \lambda_2 = \frac{A_2}{A}, \ \ \ \lambda_3 = \frac{A_3}{A}. \ \ \ \ @E[eqn:barycentric]@
\f]

Area \f$ A \f$ is the total area of the triangle and can be computed
as
\f[ A = \frac{1}{2}\left(\left(x_2y_3-x_3y_2\right) + \left(x_3y_1-x_1y_3\right) + \left(x_1y_2-x_2y_1\right)\right).\f]

Also, \f$ A_j, j=1,2,3 \f$ are the sub-area of the triangle described
in the figure. They can be computed as
\f[ A_1 = \frac{1}{2}\left(\left(x_2y_3-x_3y_2\right) +
\left(x_3y-xy_3\right) + \left(xy_2-x_2y\right)\right),\f]
\f[ A_2 = \frac{1}{2}\left(\left(xy_3-x_3y\right) +
\left(x_3y_1-x_1y_3\right) + \left(x_1y-xy_1\right)\right),\f]
\f[ A_3 = \frac{1}{2}\left(\left(x_2y-xy_2\right) + \left(xy_1-x_1y\right) + \left(x_1y_2-x_2y_1\right)\right),\f]

where \f$ x_i,y_i \f$ denotes the \f$ x- \f$ and \f$ y- \f$ coordinates of the point \f$ \mathbf{x}_i;i =1,2,3. \f$ These ratios of areas form dimensionless coordinates in the plane defined by points \f$ {\bf x}_{1}, {\bf x}_{2}, {\bf x}_{3}. \f$

A barycentric combination of three points takes the form: \f$ {\bf p}
= \lambda_1{\bf x}_{1} + \lambda_2{\bf x}_{2} + \lambda_3{\bf
x}_{3}\f$ where \f$ \lambda_1+\lambda_2+\lambda_3 = 1.\f$ The third area coordinate \f$ \lambda_3 \f$ can be
expressed as \f$ \lambda_3 = 1-\lambda_1-\lambda_2. \f$

The three vertices have the barycentric coordinates as
\f[ {\bf x}_{1} = \left(1,0,0\right), \ \ \ {\bf x}_{2} = \left(0,1,0\right), \ \ \  {\bf x}_{3} = \left(0,0,1\right). \f]


<HR>

\subsection bell_shape The Bell shape functions

The shape functions of the Bell element are defined over a triangle
and derived from the quintic polynomials with 18 degrees of
freedom. The element comprises three nodes with six degrees of
freedom at each corner node including the value, and all first and second derivatives; \f$ u, u_{x}, u_{y}, u_{xx}, u_{yy}, u_{xy}. \f$ The graphical description of the Bell element is illustrated below. 

@I w 0.75\textwidth bell_element "(Left)The Bell element with 18 degrees of freedom; 6 dofs at vertices. (Right) The description of all parameters utilised within the derivation of the Bell shape functions. "

The shape functions of the Bell element are parametrised by area
coordinates, \f$\lambda_j\f$. The subscripts \f$ik\f$ of the shape
functions \f$\psi_{ik}\f$ mean that they are evaluated at node \f$i\f$
with \f$k^{th}\f$ degree of freedom where \f$k=1\f$ denotes degree of
freedom that corresponds to the unknown value, \f$k=2,3\f$ correspond to the first derivatives with respect to the first and second global coordinates,  \f$k=4,5\f$ correspond to the second derivatives with respect to the first and second global coordinates, and \f$k=6\f$ corresponds to the mixed derivative. 

Unlike the Lagrangian interpolation functions, the Bell shape functions are derived by interpolating nodal derivatives as well as nodal displacements. Also, they have to satisfy the properties that
\f$\psi_{i1} = 1\f$ at node \f$i\f$ and \f$\psi_{i1} = 0\f$ at other
nodes. Furthermore, all of the first and the second derivatives of
\f$\psi_{i1} = 0\f$ at all nodes. Also, \f$\partial_{x}\psi_{i2} =
1\f$ at node \f$i\f$ and \f$\partial_{x}\psi_{i2} = 0\f$ at other
nodes. Similarly for the first derivative with respect to \f$y\f$, we
have that \f$\partial_{y}\psi_{i3} = 1\f$ at node \f$i\f$ and
\f$\partial_{y}\psi_{i3} = 0\f$ at other nodes. These shape functions
associated with the first derivatives are zero at all nodes for \f$\psi_{im}\f$, \f$\partial_{xx}\psi_{im}\f$, \f$\partial_{yy}\psi_{im}\f$, \f$\partial_{xy}\psi_{im}, \forall m=2,3\f$. Moreover, \f$\partial_{xx}\psi_{i4}(\mathbf{x}_{k}) = \delta_{ik}\f$, \f$\partial_{yy}\psi_{i5}(\mathbf{x}_{k}) = \delta_{ik}\f$, and \f$\partial_{xy}\psi_{i6}(\mathbf{x}_{k}) = \delta_{ik}\f$. Furthermore, these shape functions
associated with the second derivatives are zero at all nodes for \f$\psi_{im}\f$, \f$\partial_{x}\psi_{im}\f$, and \f$\partial_{y}\psi_{im}, \forall m=4,5,6\f$. 

The Bell shape functions are mathematically expressed as

\f[ \psi_{11}(\lambda_1,\lambda_2,\lambda_3) = \lambda_1^5 + 5\lambda_1^4\left( \lambda_2+\lambda_3\right) + 10\lambda_1^3\left( \lambda_2+\lambda_3\right)^2 + 30\lambda_1^2\lambda_2\lambda_3\left( l_3\lambda_2 + l^{\prime}_2\lambda_3\right), \f] 
\f[ \psi_{12}(\lambda_1,\lambda_2,\lambda_3) = 3b_1\lambda_1^2\lambda_2\lambda_3\left( \lambda_2-\lambda_3\right) +
\lambda_1^3\left(b_3\lambda_2 -b_2\lambda_3 \right)\left( \lambda_1+4\lambda_2+4\lambda_3\right) \f]
\f[ + 15\lambda_1^2\lambda_2\lambda_3\left( b_3l_3\lambda_2-b_2l^{\prime}_2\lambda_3\right), \f]
\f[ \psi_{13}(\lambda_1,\lambda_2,\lambda_3) = -3c_1\lambda_1^2\lambda_2\lambda_3\left( \lambda_2-\lambda_3\right) -
\lambda_1^3\left(c_3\lambda_2 -c_2\lambda_3 \right)\left( \lambda_1+4\lambda_2+4\lambda_3\right) \f]
\f[ - 15\lambda_1^2\lambda_2\lambda_3\left( c_3l_3\lambda_2-c_2l^{\prime}_2\lambda_3\right), \f]
\f[ \psi_{14}(\lambda_1,\lambda_2,\lambda_3) = 1/2\lambda_1^3\left(
b_3^2\lambda_2^2+b_2^2\lambda_3^2\right) + \lambda_1^2\lambda_2\lambda_3\left(-b_2b_3\lambda_1 + b_3b_1\lambda_2
+ b_1b_2\lambda_3 \right) \f]
\f[ + 5/2\lambda_1^2\lambda_2\lambda_3\left( b_3^2l_3\lambda_2+b_2^2l^{\prime}_2\lambda_3\right), \f] 
\f[ \psi_{15}(\lambda_1,\lambda_2,\lambda_3) = 1/2\lambda_1^3\left(
c_3^2\lambda_2^2+c_2^2\lambda_3^2\right) + \lambda_1^2\lambda_2\lambda_3\left(-c_2c_3\lambda_1 + c_3c_1\lambda_2
+ c_1c_2\lambda_3 \right) \f]
\f[ + 5/2\lambda_1^2\lambda_2\lambda_3\left( c_3^2l_3\lambda_2+c_2^2l^{\prime}_2\lambda_3\right), \f] 
\f[ \psi_{16}(\lambda_1,\lambda_2,\lambda_3) = b_1c_1\lambda_1^2\lambda_2\lambda_3\left(
\lambda_1+\lambda_2+\lambda_3\right) + b_2c_2\lambda_1^2\lambda_3\left( \lambda_2\lambda_3 - \lambda_3\lambda_1 - \lambda_1\lambda_2 -
\lambda_2^2\right) \f]
\f[ + b_3c_3\lambda_1^2\lambda_2\left( \lambda_2\lambda_3 - \lambda_3\lambda_1 - \lambda_1\lambda_2 - \lambda_3^2\right) - 5\lambda_1^2\lambda_2\lambda_3\left( b_2c_2l^{\prime}_2\lambda_3 + b_3c_3l_3\lambda_2\right). \ \ \ \ @E[eqn:bell_functions]@\f] 

These are shape functions associated with the first node with its 6 degrees of freedom. The shape functions at another two nodes can be obtained by performing a cyclic permutation of the Barycentric coordinates in (@R[eqn:bell_functions]@). The parameters \f$  b_i, c_i \forall i = 1,2,3, \f$ appearing in the equations can be obtained from

\f[ b_1 = x_3 - x_2, \ \ \ b_2 = x_1-x_3, \ \ \ b_3 = x_2 - x_1, \f]
\f[ c_1 = y_2 - y_3, \ \ \ c_2 = y_3-y_1, \ \ \ c_3 = y_1 - y_2, \f]
where \f$x_i,y_i; i=1,2,3,\f$ are components of a vertex
\f$\mathbf{x}_i. \f$

Note that all the first and second derivatives can be obtained by the help of the chain rule as

\f[
\frac{\partial \psi_{ij}}{\partial x_{\alpha}} = \frac{\partial \psi_{ij}}{\partial \lambda_{k}}\frac{\partial \lambda_{k}}{\partial x_{\alpha}}, \f]
\f[ \frac{\partial^2 \psi_{ij}}{\partial x_{\alpha}\partial x_{\beta}} = \frac{\partial^2 \psi_{ij}}{\partial \lambda_{m}\partial \lambda_{n}}\frac{\partial \lambda_{m}}{\partial x_{\alpha}}\frac{\partial \lambda_{n}}{\partial x_{\beta}} + \frac{\partial^2 \lambda_{k}}{\partial x_{\alpha}\partial x_{\beta}}\frac{\partial \psi_{ij}}{\partial \lambda_{k}}, \f]

and the derivatives of area coordinates with respect to global coordinates can be obtained from considering (@R[eqn:barycentric]@) with the substitutions of \f$ b_i, c_i; i=1,2,3. \f$ They are expressed as follows:

\f[ \frac{\partial \lambda_{1}}{\partial x} = \frac{c_1}{2A}, \ \ \ \frac{\partial \lambda_{2}}{\partial x} = \frac{c_2}{2A}, \ \ \ \frac{\partial \lambda_{3}}{\partial x} = \frac{c_3}{2A}, \f]

\f[ \frac{\partial \lambda_{1}}{\partial y} = \frac{b_1}{2A}, \ \ \ \frac{\partial \lambda_{2}}{\partial y} = \frac{b_2}{2A}, \ \ \ \frac{\partial \lambda_{3}}{\partial y} = \frac{b_3}{2A}. \f]

Here are graphical Bell shape functions at the first node, \f$
\psi_{1j}, j=1,...,6,\f$ evaluated at \f$ {\bf x}_1 \f$. The figures show that the Bell shape function at the first node have to satisfy the properties that
\f$\psi_{11} = 1\f$ at node \f$1\f$ and \f$\psi_{11} = 0\f$ at other
nodes. Furthermore, all of the Bell shape functions corresponded to all  first and second derivatives \f$ \psi_{1j} = 0, j=2,...,6 \f$ at all nodes. 

@I w 1.05\textwidth shapes "The Bell shape functions that correspond to the 6 degrees of freedom defined previously at the first node. Here the shape functions are evaluated at x1 which show the appreciation of the crucial properties in the Bell shape functions. "

Note that the Bell shape functions and also the first and second
derivatives are differentiated with respect to global coordinates. Therefore, the Jacobian of mapping between global to local coordinates is no longer needed to derive the derivatives of the shape functions for this type of element.

<HR>

\subsection interface The interface of accessible functions to the shape functions in the BellElement

Since the \c BellElement is constructed with the subparametric idea, there are two sets of approximating functions defined in the element.
The linear Lagrange polynomials defined in (@R[eqn:linear_lagrange]@)
will be inherited from \c TElementShape<2,2> in order to approximate the geometry. These functions can be accessible by

<CENTER>
<TABLE>
<TR>
<TD>
<CENTER>
 \c BellElement<>::shape(s,psi).
</CENTER>
</TD>
</TR>
</TABLE>
</CENTER>

In order to approximate variables in the \c BellElement, the Bell shape functions defined in (@R[eqn:bell_functions]@) will be overloaded from \c BellElementShape::Bshape(...). This function will compute the basis functions at local coordinate \f$ s \f$ and it provides \f$ C^1 \f$-continuity.

As the global coordinates are required in the derivation of the shape functions of the \c BellElementShape<>, the physical coordinates of vertices have to be passed as an argument when shape functions are overloaded. The interface of the Bell shape functions obtained from \c BellElementShape<> at local coordinate \f$ s \f$ is
\c BellElementShape<>::Bshape(s,psi,position). Similarly, the first and the second-order derivatives can be obtained at local coordinate \f$ s \f$ as
\c BellElementShape<>::dBshape(s,psi,dpsi,position) and \c BellElementShape<>::d2Bshape(s,psi,dpsi,d2psi,position), respectively. 

Note that the vector \c position is the collection of coordinates on vertices of Bell triangles. The order of nodal positions defined in the vector \c position is correspond with the order of those on physical elements. Also, the vertex nodes 0,1, and 2 situate anticlockwise.

Now, to obtained the basis functions that employed to approximate variables in \c BellElement, they can be accessible via 

<CENTER>
<TABLE>
<TR>
<TD>
<CENTER>
\c BellElement<>::basis(s,psi),
</CENTER>
</TD>
</TR>
</TABLE>
</CENTER>


and, the first and second-order derivatives of the Bell shape functions can be accessible via

<CENTER>
<TABLE>
<TR>
<TD>
<CENTER>
\c BellElement<>::dbasis(s,psi,dpsi)
\c BellElement<>::d2basis(s,psi,dpsi,d2psi),
</CENTER>
</TD>
</TR>
</TABLE>
</CENTER>
respectively.

<HR>
<HR>

\section reslt Results

Before the numerical results obtained from solving the 2D Biharmonic equation with the Bell finite element will be illustrated, the boundary conditions have to be specified. Since the Bell finite element is employed, the boundary specifications have to correspond with degrees of freedom defined for the \c BellElement in the previous section. 

Since we consider the Biharmonic equation with the Dirichlet boundary conditions, we have that the physical conditions that allow to be pinned on boundaries are the value and the normal derivatives. However, there is no normal derivative defined as a degree of freedom to be specified for the Bell shape function. Therefore, the first-order derivatives have to be imposed instead and the boundary specification can be worked out from the normal derivative on that boundary.

Furthermore, the values of the unknown and the first-order derivatives that have to be specified on the boundaries of the domain for the Bell element can be obtained from

\f[  u(x_1,x_2) = \cos(x_1)e^{x_2} , \ \ \ u_{x_1}(x_1,x_2) =
-\sin(x_1)e^{x_2}, \ \ \ u_{x_2}(x_1,x_2) = \cos(x_1)e^{x_2}. \ \ \
@E[exact_soln]@ \f]

For the rest of degrees of freedom associated with the
second-order derivatives, they are derived conditions that can
be taken care by the natural boundary conditions. In this study, we
set them to be pinned in order to reduce the number of degrees of
freedom in the problem. The values of the second-order derivatives
that have to be specified on the boundaries of the domain for the Bell
element can be worked out from (@R[exact_soln]@) and are expressed as

\f[  u_{x_1x_1}(x_1,x_2) = -\cos(x_1)e^{x_2} , \ \ \ u_{x_1x_2}(x_1,x_2) = -\sin(x_1)e^{x_2}, \ \ \ u_{x_2x_2}(x_1,x_2) = \cos(x_1)e^{x_2}. \f]

The following is a table illustrating the performance with the associated computational time of the Bell triangular elements. The accuracy of the solutions will base on the \f$L^2\f$-norm error which is mathematically described as 
\f[
|u_{exact}-u_{FE}| = \left( \int_{\Omega} | u_{exact} - u_{FE}|^2 d\Omega \right)^{1/2},
\f]
where \f$u_{exact},u_{FE}\f$ denote the exact and the finite element solutions, respectively. 

<B>Table 1:</B> \f$L^2\f$-norm error of the solution obtained from the Biharmonic implementation using the Bell element with various numbers of elements.

#<CENTER>
#<TABLE>
#<TR>
#<TD>
<CENTER>
<TABLE>
###########################################################
<TR>
<TD>
Element size (h)
</TD>
<TD>
Number of elements
</TD>
<TD>
Number of dofs
</TD>
<TD>
Error
</TD>
<TD>
Time (sec)
</TD>
</TR>
###########################################################
<TR>
<TD>
0.5
</TD>
<TD>
16
</TD>
<TD>
18
</TD>
<TD>
\f$ 3.45428 \times 10^{-5} \f$
</TD>
<TD>
0.18
</TD>
</TR>
###########################################################
<TR>
<TD>
0.2
</TD>
<TD>
100
</TD>
<TD>
216
</TD>
<TD>
\f$ 7.78578 \times 10^{-7} \f$
</TD>
<TD>
1.19
</TD>
</TR>
###########################################################
<TR>
<TD>
0.1429
</TD>
<TD>
196
</TD>
<TD>
468
</TD>
<TD>
\f$ 1.89314 \times 10^{-7} \f$
</TD>
<TD>
3.74
</TD>
</TR>
###########################################################
<TR>
<TD>
0.1
</TD>
<TD>
400
</TD>
<TD>
1026
</TD>
<TD>
\f$ 4.29805 \times 10^{-8} \f$
</TD>
<TD>
4.77
</TD>
</TR>
###########################################################
<TR>
<TD>
0.005
</TD>
<TD>
1600
</TD>
<TD>
4446
</TD>
<TD>
\f$ 2.52419 \times 10^{-9} \f$
</TD>
<TD>
19.67
</TD>
</TR>
###########################################################
<TR>
<TD>
0.01
</TD>
<TD>
40000
</TD>
<TD>
118206
</TD>
<TD>
\f$  3.86145 \times 10^{-12} \f$
</TD>
<TD>
1197.06
</TD>
</TR>
###########################################################
</TD>
</TR>
</TABLE>  
</CENTER>
#</TD>
#</TR>
#</TABLE> 
#</CENTER>

The figures below illustrate, respectively, the finite element solution and absolute error obtained from solving the Biharmonic equation with the \c BellElement on structured meshes. This implementation employs 16 triangular elements in the mesh with the number of degrees of freedom equals to 18.

@I w 0.55\textwidth Biharmonic_Bell_Soln "The finite element solution of the Biharmonic equation obtained from the BellElement. "

@I w 0.55\textwidth Biharmonic_Bell_Err "Absolute error between the exact and the finite element solutions of the Biharmonic equation obtained from the BellElement. "

Next, plotting the logarithm of \f$ L^2 \f$-error with that of the element size shows that the obtained rate of convergence of the Bell element is quartic (see figure 1.4).

@I w 0.55\textwidth Bell_Err_log "A log-plot between error and the element size from solving the Biharmonic equation with the BellElement in a rectangular domain. "

<HR>   
<HR>

\section impl Implementation in oomph-lib

<HR>

\subsection global Global parameters and functions
The namespace \c Physical_Variables is where the source
function and the exact solution are defined. The source function can
be specified via \c Physical_Variables::source_function() while the exact
solutions are defined via \c Physical_Variables::get_exact_u(). Note
that the six exact solutions correspond to the six degrees
of freedom defined on each node.

\dontinclude structured_2d_biharmonic_bellelement.cc
\skipline start_of_namespace
\until end of namespace 


<HR>

\subsection main The driver code

The driver code is very simple and short. It is where the problem is
defined. In this study, the problem is constructed using the structured mesh with triangular elements in 2D. A number of nodes in an element has to be specific as a template parameter in the problem set up. This is crucial in order to take care of element nodes which we will describe in <A HREF="../../../shell/linear_shell/html/index.html">
another tutorial</A>. Following the usual self-test, we call the function \c BiharmonicProblem::newton_solve() to compute the solution of the problem. \c BiharmonicProblem::doc_solution() will output the solution afterwards.

\dontinclude structured_2d_biharmonic_bellelement.cc
\skipline start_of_main
\until end of main

<HR>

\subsection problem The problem class

The problem class has four member functions, illustrated as follows:

- The problem constructor
- \c action_before_newton_solve() : Update the problem specifications before solve. Boundary conditions maybe set here.
- \c action_after_newton_solve() : Update the problem specifications after solve.
- \c doc_solution() : Pass the number of the case considered, so that output files can be distinguished.
.

From the above mentioned functions, only the problem constructor is non-trivial.

In the present problem, the function \c Problem::actions_after_newton_solve() is not required, so it remains empty. Also, the class includes a private data member which store a pointer to a source function.

\dontinclude structured_2d_biharmonic_bellelement.cc
\skipline start_of_problem_class
\until end of problem class

<HR>

\subsection constructor The Problem constructor

The problem constructor starts by overloading the function \c
Problem::mesh_pt() and set to the specific mesh used in this
problem. In this tutorial, we implement the problem with 2D triangular
structured mesh which is internally created by \c SimpleRectangularTriMesh<>. The generated output will be used to build \c oomph-lib mesh.

\dontinclude structured_2d_biharmonic_bellelement.cc
\skipline start_of_constructor
\until Physical_Variables::l_y

Next, the boundary conditions of the problem will be taken care. We
pin the nodal values on all boundaries and apply the Dirichlet boundary conditions. Note that the boundary identities are labelled anticlockwise where the first boundary is associated with the side \f$ (x,y) = (0,y). \f$

\skipline start_of_boundary_conditions
\until end of boundary conditions

We then loop over the elements and set the pointer to the physical
parameters, the function pointer to the source function which is the
function on the right-hand side of the Biharmonic equation.

\skipline Loop over elements
\until end of pointers set up

We finish the constructor by assigning the equation numbering scheme.
\skipline Setup equation numbering scheme
\until end of constructor

<HR>

\subsection actionbefore Action before newton solve

In the \c action_before_newton_solve(), the problem specifications
 will be updated before performing the newton solve. The boundary
 values will be (re)set from the exact solutions. 

\dontinclude structured_2d_biharmonic_bellelement.cc
\skipline start_of_actions_before_newton_solve
\until end of actions before solve

<HR>

\subsection doc Post-processing
The post-processing routine writes the computed results to 
an output file.

\dontinclude structured_2d_biharmonic_bellelement.cc
\skipline start_of_doc
\until end of doc

<HR>
<HR>

\section sources Source files for this tutorial
- The source files for this tutorial are located in the directory:\n\n
<CENTER>
<A HREF="../../../../demo_drivers/biharmonic/structured_2d_biharmonic/">
demo_drivers/biharmonic/structured_2d_biharmonic/
</A>
</CENTER>\n
- The driver code is: \n\n
<CENTER>
<A HREF="
../../../../
demo_drivers/biharmonic/structured_2d_biharmonic/structured_2d_biharmonic_bellelement.cc
">
demo_drivers/biharmonic/structured_2d_biharmonic/structured_2d_biharmonic_bellelement.cc
</A>
</CENTER>
.
